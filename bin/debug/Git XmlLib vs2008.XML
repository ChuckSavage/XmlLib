<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Git XmlLib vs2008</name>
    </assembly>
    <members>
        <member name="M:XmlLib.nXPath.XPathString.#ctor(System.String,System.Object[])">
            <summary>
            "pair[@Key&gt;={0} and @Key&lt;{1}]", 4, 6
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split">
            <summary>
            Split the path into its separate XPathStrings.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split(System.Char[])">
            <summary>
            Returns a XPathString array with the associated values in each XPathString.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split(System.String[],System.StringSplitOptions)">
            <summary>
            Returns a XPathString array with the associated values in each XPathString.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.ToPaths(System.String[])">
            <summary>
            Split out separate XPathString's by parts of an array that concatted equals Text.
            </summary>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPath(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPath(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Navigate to a specific path within source, create it if it doesn't exist.
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPathElement(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPathElement(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Navigate to a specific path within source, create it if it doesn't exist.
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XGet``1(System.Xml.Linq.XElement,System.String,``0,System.Object[])">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The elements converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XPathExtensions.XGetElement``1(System.Xml.Linq.XElement,System.String,``0,System.Object[])">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="T:XmlLib.XElementExtensions">
            <summary>
            XElement extension methods.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get child element, create it if it doesn't exist in source.  
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get child element, create it if it doesn't exist in source.  
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get child elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get child elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetDescendants(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get descendant elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetDescendants(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get descendant elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.TryGetElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Try and get the element specified by the name path, 
            if it exists return true and out the value.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetString(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get STRING of element/attribute
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetString(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Get STRING of element/attribute
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Get``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to 
            convert from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default 
            if it didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Get``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.String,System.Object,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetEnumerable``1(System.Xml.Linq.XElement,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Convert an enumerable collection to a list of XElement tags.
            </summary>
            <returns>Element that collection was set as children of.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetEnumerable``1(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Convert an enumerable collection to a list of XElement tags.
            </summary>
            <returns>Element that collection was set as children of.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.NameCheck(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            If name contains path information to a node, figure it out.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Path(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Path(System.Xml.Linq.XElement,System.String)">
            <summary>
            Navigate to a specific path within source.  Creates the path if it doesn't exist.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetSave(System.Xml.Linq.XElement)">
            <summary>
            Set a save value in the root node so that the containing xml file class
            knows that the file has changed, and therefore saves the changes.
            Instead of saving the file everytime even when no changes were made.
            <remarks>
            This is an intentionally blank stub so that the file compiles.
            </remarks>
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.ToXName(System.Xml.Linq.XElement,System.String)">
            <summary>
            Convert a name like "im:big" to 
            source.GetNamespaceOfPrefix("im") + "big".
            </summary>
        </member>
        <member name="T:XmlLib.XElementExtensions.ConverterCache`1">
            <summary>
            Store converters for a quicker lookup.
            <remarks>
            Saves about 3 MS (averaged) on ~3000 Get()'s 
            run 1000 times.
            </remarks>
            </summary>
        </member>
        <member name="T:XmlLib.ParseCache`1">
            <summary>
            If using something like 'Windows Phone 7' that doesn't have access to
            the TypeConverter class, then using a TryParse is another option.
            <para>
            This class tries to find a TryParse method within the generic type T
            otherwise it will fail gracefully.
            </para>
            </summary>
        </member>
        <member name="T:XmlLib.ConstructorCache`1">
            <summary>
            Try to get a constructor that takes a single string value
            </summary>
        </member>
        <member name="M:XmlLib.ConstructorCache`1.TryInvoke(System.Xml.Linq.XElement,System.String,`0@)">
            <summary>
            Try invoking a constructor that takes a single string value or
            a single XElement value.
            <remarks>
            Creating a custom class to parse values either by string or
            from the XElement source itself, can be a slick way to make this
            system work for you.
            </remarks>
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPath_Bracket.Element(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Returns an empty element if not found.
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.XPath_Bracket.XPath">
            <summary>
            The expression.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.cXPath.Enumerable(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Get the elements of a path "path/to/node" or "path[to/node/@attribute&gt;=20.50]".
            <remarks>
            <para>See XPath docs for help on using [number][key=value]
            - syntax (http://www.w3.org/TR/xpath/)</para>
            </remarks>
            </summary>
            <param name="create">create path if it doesn't exist?</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.nXPath.cXPath.Element(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Get the first element of a path "path/to/node" or "path[to/node/@attribute&gt;=20.50]".
            <remarks>
            <para>See XPath docs for help on using [number][key=value]
            - syntax (http://www.w3.org/TR/xpath/)</para>
            </remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
    </members>
</doc>
