<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Git XmlLib vs2008</name>
    </assembly>
    <members>
        <member name="T:XmlLib.nXPath.Functions.EndsWith">
            <summary>
            <para>Example: root.XPath("//*[ends-with(first, second)]");</para>
            <para>Syntax: ends-with(,'x')</para>
            <para>Syntax: ends-with(nodeset, 'x')</para>
            <para>Syntax: ends-with(nodeset, 'x', (bool)ConvertToUpper/ElseLower)</para>
            <para>Syntax: ends-with('x', nodeset)</para>
            <para>Syntax: ends-with('x', nodeset, (bool)ConvertToUpper/ElseLower)</para>
            <para>- nodeset: path to a node or attribute and its value</para>
            <para>Returns: Returns the nodes that first ends-with second.</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.FunctionBase.Args">
            <summary>
            Arguments to the function.
            <remarks>Set by XPath_Part</remarks>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.FunctionBase.HasKVP">
            <summary>
            true
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.FunctionBase.ArgumentsRequired">
            <summary>
            true
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.FunctionBase.ArgumentsValueRequired">
            <summary>
            true
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.FunctionBase.IsEqual">
            <summary>
            true
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.EndsWith.IsEqual">
            <summary>
            false
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.MinMax">
            <summary>
            <para>Example: root2.XPathElement("pair[max(@Key, {0})]", 0);</para>
            <para>Syntax: max(key, type)</para>
            <para>- key: is element or attribute path nodeset</para>
            <para>- type: isn't a value to compare against, but the type of the key to get 
            the min/max value of.</para>
            <para>Returns: The min/max pair node.</para>
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPath_Part.Format(System.String)">
            <summary>
            Get the possible Values parameter of the value, aka if its 
            a {0} instead of an actual value it needs to be replaced with its value
            from the Values list.
            </summary>
            <param name="sValue"></param>
            <returns></returns>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.StringFormatBrackets">
            <summary>
            Regex pattern for getting {0}, {1}, etc.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.Create">
            <summary>
            Create elements if they don't exist so as not to throw null exceptions.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.Text">
            <summary>
            The text of the path will filled in values.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.Format">
            <summary>
            The string.Format version of the path.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.Values">
            <summary>
            The values to fill the Format with for string.Format.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.IsElements">
            <summary>
            Elements() or Descendants() to be called with the Name, 
            aka the path was proceeded with two slashes.
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.IsRelative">
            <summary>
            Is search relative from current node, or from the root of the document?
            </summary>
        </member>
        <member name="F:XmlLib.nXPath.XPathString.PathSegments">
            <summary>
            The breakdown in the path into its separate path segments.
            Aka breaking it up via the forward-slash segments.
            <para>Example: segement1[stillSegment1/1/1]/segment2[2/2=2]/segment3</para>
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.#ctor(System.String,System.Object[])">
            <summary>
            "pair[@Key&gt;={0} and @Key&lt;{1}]", 4, 6
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Combine(System.Collections.Generic.IEnumerable{XmlLib.nXPath.XPathString})">
            <summary>
            Combine two or more XPathString's into one.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Combine(XmlLib.nXPath.XPathString[])">
            <summary>
            Combine two or more XPathString's into one.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.PreceedPathWithFlags(System.String@)">
            <summary>
            Get forward slashes before path if Root or Descendants based.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split">
            <summary>
            Split the path into its separate XPathStrings.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split(System.Char[])">
            <summary>
            Returns a XPathString array with the associated values in each XPathString.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.Split(System.String[],System.StringSplitOptions,System.Boolean)">
            <summary>
            Returns a XPathString array with the associated values in each XPathString.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathString.ToPaths(System.Boolean,System.String[])">
            <summary>
            Split out separate XPathString's by parts of an array that concatted equals Text.
            </summary>
            <param name="passFlags2ndEtc">
            You want to pass on flags to and/or splits (aka splits within brackets) but not on file paths.
            </param>
            <param name="parts"></param>
            <returns></returns>
        </member>
        <member name="P:XmlLib.nXPath.XPathString.IsXPath">
            <summary>
            Does the path contain brackets.
            This is weak-sauce, everything should be treated as an XPath for more advanced XPath scenarios.
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.XPathString.Name">
            <summary>
            The name of the node's that will be returned from the search if successful.
            </summary>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPath(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPath(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Navigate to a specific path within source, create it if it doesn't exist.
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPathElement(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XPathElement(System.Xml.Linq.XElement,System.String,System.Object[])">
            <summary>
            Navigate to a specific path within source, create it if it doesn't exist.
            <remarks>See XPath docs for help on using [number][key=value] 
            syntax (http://www.w3.org/TR/xpath/)</remarks>
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:XmlLib.XPathExtensions.XGet``1(System.Xml.Linq.XElement,System.String,``0,System.Object[])">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The elements converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XPathExtensions.XGetElement``1(System.Xml.Linq.XElement,System.String,``0,System.Object[])">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="T:XmlLib.nXPath.Functions.Substring">
            <summary>
            <para>Example: root2.XPathElement("pair[substring(., 3, 5)={0}]", "child");</para>
            <para>Syntax: string-length(nodeset, start)</para>
            <para>Syntax: string-length(nodeset, start, length)</para>
            <para>- nodeset: path to a node or attribute, and its value.</para>
            <para>- start: int value starting with 1 for first character.</para>
            <para>- length: int value for last character.</para>
            <para>Returns: Evaulates to true or false, whether the string is equal to the value</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.Substring.IsEqual">
            <summary>
            false (isn't IsEqual exclusively)
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.Substring.HasKVP">
            <summary>
            false
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.Contains">
            <summary>
            <para>Example: root.XPath("//*[contains(first, second)]");</para>
            <para>Syntax: Contains(,'x') - tag-name contains 'x'</para>
            <para>Syntax: Contains(nodeset, 'x') - nodeset contains 'x'</para>
            <para>Syntax: Contains(nodeset, 'x', (bool)ConvertToUpper/ElseLower)</para>
            <para>Syntax: Contains('x', nodeset) - 'x' contains nodeset</para>
            <para>Syntax: Contains('x', nodeset, (bool)ConvertToUpper/ElseLower)</para>
            <para>- nodeset: path to a node or attribute and its value</para>
            <para>Returns: Returns the nodes that first contains second.</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.Contains.IsEqual">
            <summary>
            false
            </summary>
        </member>
        <member name="T:XmlLib.XElementExtensions">
            <summary>
            XElement extension methods.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.String)">
            <summary>
            An attribute with the same namespace as the source will be null if it doesn't
            specify the namespace abbreviation.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            An attribute with the same namespace as the source will be null if it doesn't
            specify the namespace abbreviation.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get child element, create it if it doesn't exist in source.  
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get child element, create it if it doesn't exist in source.  
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get child elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetElements(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get child elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetDescendants(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Get descendant elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetDescendants(System.Xml.Linq.XElement,System.String)">
            <summary>
            Get descendant elements.
            </summary>
            <param name="name">The tag name of the XElement.</param>
            <returns>XElement found or created.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.TryGetElement(System.Xml.Linq.XElement,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Try and get the element specified by the name path, 
            if it exists return true and out the value.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetString(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.String)">
            <summary>
            Get STRING of element/attribute
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetString(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Get STRING of element/attribute
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Get``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,``0)">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to 
            convert from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default 
            if it didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Get``1(System.Xml.Linq.XElement,System.String,``0)">
            <summary>
            Generic Get for a type.
            <remarks>
            It works as long as there is a converter for the type to convert 
            from string.
            </remarks>
            </summary>
            <returns>The element converted to its type or the default if it 
            didn't exist or was empty.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.String,System.Object,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.Set(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set any value via its .ToString() method.
            <para>
            Returns XElement of source or the new XElement if is an ELEMENT
            </para>
            </summary>
            <param name="isAttribute">
            Use ATTRIBUTE or ELEMENT for clarity
            </param>
            <returns>source or XElement value</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.Xml.Linq.XName,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.String,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.GetEnumerable``1(System.Xml.Linq.XElement,System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            Convert a list of like tags into an enumerable collection.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetEnumerable``1(System.Xml.Linq.XElement,System.String,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Convert an enumerable collection to a list of XElement tags.
            </summary>
            <returns>Element that collection was set as children of.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetEnumerable``1(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Xml.Linq.XElement})">
            <summary>
            Convert an enumerable collection to a list of XElement tags.
            </summary>
            <returns>Element that collection was set as children of.</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.NameCheck(System.Xml.Linq.XElement,System.String,System.String@)">
            <summary>
            If name contains path information to a node, figure it out.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Path(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Navigate to a specific path within source.  (create path if it doesn't exist?)
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Path(System.Xml.Linq.XElement,System.String)">
            <summary>
            Navigate to a specific path within source.  Creates the path if it doesn't exist.
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.Root(System.Xml.Linq.XElement)">
            <summary>
            Return root node of Xml tree of node that calls this
            </summary>
            <param name="source"></param>
            <returns>the root element</returns>
        </member>
        <member name="M:XmlLib.XElementExtensions.SetSave(System.Xml.Linq.XElement)">
            <summary>
            Set a save value in the root node so that the containing xml file class
            knows that the file has changed, and therefore saves the changes.
            Instead of saving the file everytime even when no changes were made.
            <remarks>
            This is an intentionally blank stub so that the file compiles.
            </remarks>
            </summary>
        </member>
        <member name="M:XmlLib.XElementExtensions.ToXName(System.Xml.Linq.XElement,System.String)">
            <summary>
            Convert a name like "im:big" to 
            source.GetNamespaceOfPrefix("im") + "big".
            </summary>
        </member>
        <member name="T:XmlLib.XElementExtensions.ConverterCache`1">
            <summary>
            Store converters for a quicker lookup.
            <remarks>
            Saves about 3 MS (averaged) on ~3000 Get()'s 
            run 1000 times.
            </remarks>
            </summary>
        </member>
        <member name="T:XmlLib.ParseCache`1">
            <summary>
            If using something like 'Windows Phone 7' that doesn't have access to
            the TypeConverter class, then using a TryParse is another option.
            <para>
            This class tries to find a TryParse method within the generic type T
            otherwise it will fail gracefully.
            </para>
            </summary>
        </member>
        <member name="T:XmlLib.ConstructorCache`1">
            <summary>
            Try to get a constructor that takes a single string value
            </summary>
        </member>
        <member name="M:XmlLib.ConstructorCache`1.TryInvoke(System.Xml.Linq.XElement,System.String,`0@)">
            <summary>
            Try invoking a constructor that takes a single string value or
            a single XElement value.
            <remarks>
            Creating a custom class to parse values either by string or
            from the XElement source itself, can be a slick way to make this
            system work for you.
            </remarks>
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.Attribute(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Get the Attribute from the parent node.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.AttributeValue(System.Linq.Expressions.Expression,XmlLib.nXPath.XPath_Part,System.String)">
            <summary>
            Get the Attribute value from the parent node.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.Element(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Get the child element based on the key.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.Element(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Get the child element based on the name.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.ElementValue(System.Linq.Expressions.Expression,XmlLib.nXPath.XPath_Part,System.String)">
            <summary>
            Get the child Element value from the parent node.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.GetElement(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Get the child element based on the key.
            Returns an empty element if not found.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.GetMethodExpression``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            var getRowValExpr = GetMethodExpression(x => x.GetRowValue(0));
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.ToStringExpression(System.Linq.Expressions.Expression)">
            <summary>
            Call .ToString() on the Expression value.
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.XPathUtils.ToXName(System.Linq.Expressions.Expression,System.String)">
            <summary>
            Convert Attribute or Element key to the proper XName via the parent XElement node.
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.NodeResult">
            <summary>
            NodeSet Node() returns an XElement, XAttribute or an array of either.  So
            instead return this so we can know what it is.
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.XPath_Bracket.XPath">
            <summary>
            The expression.
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.Name">
            <summary>
            <para>Example: root2.XPathElement("//*[name()={0}]", "div");</para>
            <para>Syntax: name()</para>
            <para>Syntax: name(nodeset)</para>
            <para>- nodeset: path to a node or attribute, and its name.</para>
            <para>Returns the name of the current node or the first node in the specified node set</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.Name.ArgumentsRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.Name.ArgumentsValueRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.LocalName">
            <summary>
            <para>Example: root2.XPathElement("pair[local-name()={0}]", "div");</para>
            <para>Syntax: local-name()</para>
            <para>Syntax: local-name(nodeset)</para>
            <para>- nodeset: path to a node or attribute, and its local-name.</para>
            <para>Returns: Returns the name of the current node or the first node 
            in the specified node set - without the namespace prefix</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.LocalName.ArgumentsRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.LocalName.ArgumentsValueRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.Functions.KVP.Eval``1(XmlLib.nXPath.XPath_Part,``0[])">
            <summary>
            Bool result of NotEqual, LessThanOrEqual, etc of any part.Value in values.
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.NodeSet">
            <summary>
            String wrapper class to diferentiate between parameters to functions, which
            is the key(nodeset) and which is the value to compare versus.
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.StringLength">
            <summary>
            <para>Example: root2.XPathElement("pair[string-length()={0}]", 5);</para>
            <para>Syntax: string-length()</para>
            <para>Syntax: string-length(nodeset to string node)</para>
            <para>- nodeset: path to a node or attribute, and its local-name.</para>
            <para>Returns: Evaulates to true or false, whether the string is equal to the value</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.StringLength.IsEqual">
            <summary>
            false (isn't IsEqual exclusively)
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.StringLength.ArgumentsRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.StringLength.ArgumentsValueRequired">
            <summary>
            false
            </summary>
        </member>
        <member name="T:XmlLib.nXPath.Functions.StartsWith">
            <summary>
            <para>Example: root.XPath("//*[starts-with(first, second)]");</para>
            <para>Syntax: starts-with(,'x')</para>
            <para>Syntax: starts-with(nodeset, 'x')</para>
            <para>Syntax: starts-with(nodeset, 'x', (bool)ConvertToUpper/ElseLower)</para>
            <para>Syntax: starts-with('x', nodeset)</para>
            <para>Syntax: starts-with('x', nodeset, (bool)ConvertToUpper/ElseLower)</para>
            <para>- nodeset: path to a node or attribute and its value</para>
            <para>Returns: Returns the nodes that first starts-with second.</para>
            </summary>
        </member>
        <member name="P:XmlLib.nXPath.Functions.StartsWith.IsEqual">
            <summary>
            false
            </summary>
        </member>
        <member name="M:XmlLib.nXPath.cXPath.Enumerable(System.Xml.Linq.XElement,XmlLib.nXPath.XPathString,System.Boolean)">
            <summary>
            Get the elements of a path "path/to/node" or "path[to/node/@attribute&gt;=20.50]".
            <remarks>
            <para>See XPath docs for help on using [number][key=value]
            - syntax (http://www.w3.org/TR/xpath/)</para>
            </remarks>
            </summary>
            <param name="create">create path if it doesn't exist?</param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
    </members>
</doc>
